location / {
access_by_lua '
    local lua_resty_waf = require "waf"

    local waf = lua_resty_waf:new()

    -- default options can be overridden
    waf:set_option("debug", false)

    -- send event logs to a local file on disk
    waf:set_option("event_log_target", "file")
    waf:set_option("event_log_target_path", "/var/log/nginx/event.log")

    -- flush the event log buffer every 5 seconds
    waf:set_option("event_log_periodic_flush", 5)
    
    -- the rule description will be written in addition to existing data
    waf:set_option("event_log_verbosity", 2)

    waf:set_option("event_log_ngx_vars", "host")
    waf:set_option("event_log_ngx_vars", "request_id")
    waf:set_option("event_log_request_arguments", true)
    waf:set_option("event_log_request_headers", true)

    -- run the firewall
    waf:exec()
';

header_filter_by_lua '
    local lua_resty_waf = require "waf"

    -- note that options set in previous handlers (in the same scope)
    -- do not need to be set again
    local waf = lua_resty_waf:new()

    waf:exec()
';

body_filter_by_lua '
    local lua_resty_waf = require "waf"

    local waf = lua_resty_waf:new()

    waf:exec()
';

log_by_lua '
    local lua_resty_waf = require "waf"

    local waf = lua_resty_waf:new()

    -- write out any event log entries to the
    -- configured target, if applicable
    waf:write_log_events()
';
}
